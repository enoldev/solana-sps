// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto";

export class UiTokenAmount {
  static encode(message: UiTokenAmount, writer: Writer): void {
    writer.uint32(9);
    writer.double(message.uiAmount);

    writer.uint32(16);
    writer.uint32(message.decimals);

    writer.uint32(26);
    writer.string(message.amount);

    writer.uint32(34);
    writer.string(message.uiAmountString);
  }

  static decode(reader: Reader, length: i32): UiTokenAmount {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new UiTokenAmount();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.uiAmount = reader.double();
          break;

        case 2:
          message.decimals = reader.uint32();
          break;

        case 3:
          message.amount = reader.string();
          break;

        case 4:
          message.uiAmountString = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  uiAmount: f64;
  decimals: u32;
  amount: string;
  uiAmountString: string;

  constructor(
    uiAmount: f64 = 0.0,
    decimals: u32 = 0,
    amount: string = "",
    uiAmountString: string = ""
  ) {
    this.uiAmount = uiAmount;
    this.decimals = decimals;
    this.amount = amount;
    this.uiAmountString = uiAmountString;
  }
}
