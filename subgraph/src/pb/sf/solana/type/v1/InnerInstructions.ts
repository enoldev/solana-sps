// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto";
import { InnerInstruction } from "./InnerInstruction";

export class InnerInstructions {
  static encode(message: InnerInstructions, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.index);

    const instructions = message.instructions;
    for (let i: i32 = 0; i < instructions.length; ++i) {
      writer.uint32(18);
      writer.fork();
      InnerInstruction.encode(instructions[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): InnerInstructions {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new InnerInstructions();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.index = reader.uint32();
          break;

        case 2:
          message.instructions.push(
            InnerInstruction.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  index: u32;
  instructions: Array<InnerInstruction>;

  constructor(index: u32 = 0, instructions: Array<InnerInstruction> = []) {
    this.index = index;
    this.instructions = instructions;
  }
}
