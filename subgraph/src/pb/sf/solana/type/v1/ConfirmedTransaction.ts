// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto";
import { Transaction } from "./Transaction";
import { TransactionStatusMeta } from "./TransactionStatusMeta";

export class ConfirmedTransaction {
  static encode(message: ConfirmedTransaction, writer: Writer): void {
    const transaction = message.transaction;
    if (transaction !== null) {
      writer.uint32(10);
      writer.fork();
      Transaction.encode(transaction, writer);
      writer.ldelim();
    }

    const meta = message.meta;
    if (meta !== null) {
      writer.uint32(18);
      writer.fork();
      TransactionStatusMeta.encode(meta, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ConfirmedTransaction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ConfirmedTransaction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.transaction = Transaction.decode(reader, reader.uint32());
          break;

        case 2:
          message.meta = TransactionStatusMeta.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  transaction: Transaction | null;
  meta: TransactionStatusMeta | null;

  constructor(
    transaction: Transaction | null = null,
    meta: TransactionStatusMeta | null = null
  ) {
    this.transaction = transaction;
    this.meta = meta;
  }
}
